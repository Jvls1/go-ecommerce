// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/role_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/role_repository.go -destination=test/mocks/role_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Jvls1/go-ecommerce/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// AddPermissionToRole mocks base method.
func (m *MockRoleRepository) AddPermissionToRole(roleID, permissionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionToRole", roleID, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissionToRole indicates an expected call of AddPermissionToRole.
func (mr *MockRoleRepositoryMockRecorder) AddPermissionToRole(roleID, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionToRole", reflect.TypeOf((*MockRoleRepository)(nil).AddPermissionToRole), roleID, permissionID)
}

// GetRoleById mocks base method.
func (m *MockRoleRepository) GetRoleById(id uuid.UUID) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", id)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockRoleRepositoryMockRecorder) GetRoleById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockRoleRepository)(nil).GetRoleById), id)
}

// StoreRole mocks base method.
func (m *MockRoleRepository) StoreRole(role *domain.Role) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRole", role)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRole indicates an expected call of StoreRole.
func (mr *MockRoleRepositoryMockRecorder) StoreRole(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRole", reflect.TypeOf((*MockRoleRepository)(nil).StoreRole), role)
}
