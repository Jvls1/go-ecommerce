// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/permission_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/permission_repository.go -destination=test/mocks/permission_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Jvls1/go-ecommerce/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionRepository is a mock of PermissionRepository interface.
type MockPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepositoryMockRecorder
}

// MockPermissionRepositoryMockRecorder is the mock recorder for MockPermissionRepository.
type MockPermissionRepositoryMockRecorder struct {
	mock *MockPermissionRepository
}

// NewMockPermissionRepository creates a new mock instance.
func NewMockPermissionRepository(ctrl *gomock.Controller) *MockPermissionRepository {
	mock := &MockPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepository) EXPECT() *MockPermissionRepositoryMockRecorder {
	return m.recorder
}

// GetPermissionById mocks base method.
func (m *MockPermissionRepository) GetPermissionById(id uuid.UUID) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionById", id)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionById indicates an expected call of GetPermissionById.
func (mr *MockPermissionRepositoryMockRecorder) GetPermissionById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionById", reflect.TypeOf((*MockPermissionRepository)(nil).GetPermissionById), id)
}

// StorePermission mocks base method.
func (m *MockPermissionRepository) StorePermission(permission *domain.Permission) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePermission", permission)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePermission indicates an expected call of StorePermission.
func (mr *MockPermissionRepositoryMockRecorder) StorePermission(permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePermission", reflect.TypeOf((*MockPermissionRepository)(nil).StorePermission), permission)
}
