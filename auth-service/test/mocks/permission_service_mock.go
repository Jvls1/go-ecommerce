// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/permission_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/permission_service.go -destination=test/mocks/permission_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Jvls1/go-ecommerce/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionService is a mock of PermissionService interface.
type MockPermissionService struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceMockRecorder
}

// MockPermissionServiceMockRecorder is the mock recorder for MockPermissionService.
type MockPermissionServiceMockRecorder struct {
	mock *MockPermissionService
}

// NewMockPermissionService creates a new mock instance.
func NewMockPermissionService(ctrl *gomock.Controller) *MockPermissionService {
	mock := &MockPermissionService{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionService) EXPECT() *MockPermissionServiceMockRecorder {
	return m.recorder
}

// RetrievePermissionById mocks base method.
func (m *MockPermissionService) RetrievePermissionById(permissionId uuid.UUID) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrievePermissionById", permissionId)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePermissionById indicates an expected call of RetrievePermissionById.
func (mr *MockPermissionServiceMockRecorder) RetrievePermissionById(permissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePermissionById", reflect.TypeOf((*MockPermissionService)(nil).RetrievePermissionById), permissionId)
}

// SavePermission mocks base method.
func (m *MockPermissionService) SavePermission(permission *domain.Permission) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePermission", permission)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePermission indicates an expected call of SavePermission.
func (mr *MockPermissionServiceMockRecorder) SavePermission(permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePermission", reflect.TypeOf((*MockPermissionService)(nil).SavePermission), permission)
}
