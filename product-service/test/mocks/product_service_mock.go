// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/product_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/product_service.go -destination=test/mocks/product_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Jvls1/go-ecommerce/product-service/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductService) CreateProduct(name, description, imageUrl string, price float64, quantity int32, departmentId string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", name, description, imageUrl, price, quantity, departmentId)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductServiceMockRecorder) CreateProduct(name, description, imageUrl, price, quantity, departmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductService)(nil).CreateProduct), name, description, imageUrl, price, quantity, departmentId)
}

// FindProductByID mocks base method.
func (m *MockProductService) FindProductByID(id string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductByID", id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductByID indicates an expected call of FindProductByID.
func (mr *MockProductServiceMockRecorder) FindProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByID", reflect.TypeOf((*MockProductService)(nil).FindProductByID), id)
}

// FindProducts mocks base method.
func (m *MockProductService) FindProducts(page, pageSize int) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProducts", page, pageSize)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProducts indicates an expected call of FindProducts.
func (mr *MockProductServiceMockRecorder) FindProducts(page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProducts", reflect.TypeOf((*MockProductService)(nil).FindProducts), page, pageSize)
}

// FindProductsByDepartmentId mocks base method.
func (m *MockProductService) FindProductsByDepartmentId(departmentId string) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByDepartmentId", departmentId)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByDepartmentId indicates an expected call of FindProductsByDepartmentId.
func (mr *MockProductServiceMockRecorder) FindProductsByDepartmentId(departmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByDepartmentId", reflect.TypeOf((*MockProductService)(nil).FindProductsByDepartmentId), departmentId)
}
